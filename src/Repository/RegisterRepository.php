<?php
/**
 * Copyright (c) 2016.
 * Desarrollado por Atlantic International Technology para Sohiscert
 */

namespace App\Repository;


use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\NoResultException;
use App\Entity\Register;
/**
 * RegisterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegisterRepository extends ServiceEntityRepository
{

    public function __construct(ManagerRegistry $registry)
    {
       
        parent::__construct($registry,Register::class);
    }

    /**
     * Function that compares all atributes of two instances of and Object to determine when to update the oldest one.
     *
     * @param Register $registerxml
     * @param Register $registerddbb
     * @return bool
     */
    public function compareEntities(Register $registerxml, Register $registerddbb)
    {
        $res = false;

        if ($registerxml->getReDeno() != $registerddbb->getReDeno()) {
            $res = true;
        }
        if ($registerxml->getReTipo() != $registerddbb->getReTipo()) {
            $res = true;
        }
        if ($registerxml->getRePad() != $registerddbb->getRePad()) {
            $res = true;
        }
        if ($registerxml->getReAct() != $registerddbb->getReAct()) {
            $res = true;
        }

        return $res;
    }

    /**
     * @param $reDeno
     * @return array|null
     */
    public function findDeno($reDeno)
    {
        $empty = "";

        $query = $this->getEntityManager()
            ->createQuery('
			SELECT r.reDeno 
			FROM App\Entity\Register r
			WHERE r.reDeno like :deno and r.rePad = :empty
			')
            ->setMaxResults(1)
            ->setParameter('deno', '%' . $reDeno . '%')->setParameter('empty', $empty);
        try {
            return $query->getResult();
        } catch (NoResultException $e) {
            return null;
        }
    }

    /**
     * @return array|null
     */
    public function findParentRegisters()
    {
        $empty = "";
        $query = $this->getEntityManager()
            ->createQuery('
			SELECT r.codigo, r.reDeno 
			FROM App\Entity\Register r
			WHERE r.rePad = :empty
			')
            ->setParameter('empty', $empty);
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
