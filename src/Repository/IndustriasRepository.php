<?php
/**
 * Copyright (c) 2016.
 * Desarrollado por Atlantic International Technology para Sohiscert
 */

namespace App\Repository;


use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use App\Entity\Industrias;
/**
 * IndustriasRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IndustriasRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
       
        parent::__construct($registry,Industrias::class);
    }
    
    /**
     * Function that compares all atributes of two instances of and Object to determine when to update the oldest one.
     *
     * @param Industrias $industriasxml
     * @param Industrias $industriasddbb
     * @return bool
     */
    public function compareEntities(Industrias $industriasxml, Industrias $industriasddbb)
    {
        $res = false;

        if ($industriasxml->getCodigo() != $industriasddbb->getCodigo()) {
            $res = true;
        }
        if ($industriasxml->getInAct() != $industriasddbb->getInAct()) {
            $res = true;
        }
        if ($industriasxml->getInSit() != $industriasddbb->getInSit()) {
            $res = true;
        }
        if ($industriasxml->getInCcl() != $industriasddbb->getInCcl()) {
            $res = true;
        }
        if ($industriasxml->getInCdp() != $industriasddbb->getInCdp()) {
            $res = true;
        }
        if ($industriasxml->getInDom() != $industriasddbb->getInDom()) {
            $res = true;
        }
        if ($industriasxml->getInTel() != $industriasddbb->getInTel()) {
            $res = true;
        }
        if ($industriasxml->getInProv() != $industriasddbb->getInProv()) {
            $res = true;
        }
        if ($industriasxml->getInPob() != $industriasddbb->getInPob()) {
            $res = true;
        }

        return $res;
    }

    public function getDistinctActividades()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        /**
         * Select usando Expr() Class de Doctrine ->
         * http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/query-builder.html#the-expr-class
         */
        $q = $qb->select(array('DISTINCT act.id,act.ainDeno'))
            ->from('App\Entity\Industrias', 'ind')
//            ->where(
//                $qb->expr()->notLike('op.opAct', ':vacio')
//            )
            ->innerJoin('App\Entity\ActividadesI', 'act', 'WITH', 'ind.inActividadI = act.id')
            ->getQuery();

        $result = $q->getResult();

        return $result;
    }

    /**
     * Buscador de Operadores de Industria con Actividad Industrial determinada.
     *
     * Dada una id de ActividadesI busca Operadores de Industria con dicha actividad vinculada,
     * pudiendo filtrar además por cif o denominación de operador.
     *
     * @param integer $id Id de ActividadesI
     * @param string $opCif El cif de un Operador
     * @param string $opDenoop La denominación de un Operador.
     * @return array
     */
    public function getIndusOperatorsByAct($id, $opCif, $opDenoop)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        /**
         * Select usando Expr() Class de Doctrine ->
         * http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/query-builder.html#the-expr-class
         */
        $q = $qb->select(array('DISTINCT op.id as id, op.opNop as opNop, op.codigo as codigo,
         op.opDenoop as opDenoop, op.opCif as opCif, re.reDeno as reDeno,
          op.opEst as opEst, op.opEst, op.opTpex as opTpex, op.opTel as opTel'))
            ->from('App\Entity\Operator', 'op')
            ->where(
                $qb->expr()->like('op.opCif', ':opCif'),
                $qb->expr()->like('op.opDenoop', ':opDenoop'),
                $qb->expr()->eq('ind.inActividadI', ':id')
            )
            ->innerJoin('App\Entity\Industrias', 'ind', 'WITH', 'ind.inOperator = op.id')
            ->innerJoin('AApp\Entity\Register', 're', 'WITH', 'op.opRegistro = re.id')
            ->setParameter('id', $id)
            ->setParameter('opCif', '%' . $opCif . '%')
            ->setParameter('opDenoop', '%' . $opDenoop . '%')
            ->getQuery();

        $result = $q->getResult();

        return $result;

    }
}
